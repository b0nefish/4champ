//
//  PlaylistStore.swift
//  4champ
//
//  Created by Aleksi Sitomaniemi on 15.3.2020.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SwiftUI

protocol PlaylistDisplayLogic: class
{
  func displayPlaylist(viewModel: Playlists.Select.ViewModel)
}

class PlaylistStore: ObservableObject, PlaylistDisplayLogic
{
  var interactor: PlaylistBusinessLogic?
  var router: (NSObjectProtocol & PlaylistRoutingLogic & PlaylistDataPassing)?
  weak var hostingController: UIHostingController<PlaylistView>?
  // MARK: Object lifecycle

  @Published var viewModel: Playlists.Select.ViewModel
  @Published var nowPlaying: Bool
  
  // MARK: Setup
  
  init() {
    viewModel = Playlists.Select.ViewModel(playlistName: "", shuffle: false, modules: [])
    nowPlaying = false
    modulePlayer.addPlayerObserver(self)
  }
  
  deinit {
    modulePlayer.removePlayerObserver(self)
  }
  
  func setup()
  {
    let viewController = self
    let interactor = PlaylistInteractor()
    let presenter = PlaylistPresenter()
    let router = PlaylistRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.dataStore = interactor
    interactor.selectPlaylist(request: Playlists.Select.Request(playlistId: ""))
  }
  
  func displayPlaylist(viewModel: Playlists.Select.ViewModel) {
    self.viewModel = viewModel
  }
}

extension PlaylistStore: ModulePlayerObserver {
  func moduleChanged(module: MMD) {
    //    tableView?.reloadData()
  }
  
  func statusChanged(status: PlayerStatus) {
    if status == .stopped || status == .initialised {
      nowPlaying = false
    } else {
      nowPlaying = true
    }
  }
  
  func errorOccurred(error: PlayerError) {
    //nop at the moment
  }
  
  func playlistChanged() {
    let req = Playlists.Select.Request(playlistId: modulePlayer.currentPlaylist?.plId ?? "default")
    interactor?.selectPlaylist(request: req)
  }
}
